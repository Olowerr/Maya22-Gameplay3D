// Autogenerated by gameplay-luagen
#include "Base.h"
#include "ScriptController.h"
#include "lua_TransformListener.h"
#include "Animation.h"
#include "AnimationTarget.h"
#include "AudioSource.h"
#include "Base.h"
#include "Camera.h"
#include "Game.h"
#include "Joint.h"
#include "MaterialParameter.h"
#include "MeshSkin.h"
#include "Node.h"
#include "PhysicsCharacter.h"
#include "PhysicsGhostObject.h"
#include "PhysicsRigidBody.h"
#include "ScriptController.h"
#include "ScriptTarget.h"
#include "Terrain.h"
#include "Transform.h"
#include "AudioSource.h"
#include "Camera.h"
#include "MeshSkin.h"
#include "PhysicsGhostObject.h"
#include "PhysicsRigidBody.h"
#include "Terrain.h"

namespace gameplay
{

extern void luaGlobal_Register_Conversion_Function(const char* className, void*(*func)(void*, const char*));

static Transform::Listener* getInstance(lua_State* state)
{
    void* userdata = luaL_checkudata(state, 1, "TransformListener");
    luaL_argcheck(state, userdata != NULL, 1, "'TransformListener' expected.");
    return (Transform::Listener*)((gameplay::ScriptUtil::LuaObject*)userdata)->instance;
}

static int lua_TransformListener__gc(lua_State* state)
{
    // Get the number of parameters.
    int paramCount = lua_gettop(state);

    // Attempt to match the parameters to a valid binding.
    switch (paramCount)
    {
        case 1:
        {
            if ((lua_type(state, 1) == LUA_TUSERDATA))
            {
                void* userdata = luaL_checkudata(state, 1, "TransformListener");
                luaL_argcheck(state, userdata != NULL, 1, "'TransformListener' expected.");
                gameplay::ScriptUtil::LuaObject* object = (gameplay::ScriptUtil::LuaObject*)userdata;
                if (object->owns)
                {
                    Transform::Listener* instance = (Transform::Listener*)object->instance;
                    SAFE_DELETE(instance);
                }
                
                return 0;
            }

            lua_pushstring(state, "lua_TransformListener__gc - Failed to match the given parameters to a valid function signature.");
            lua_error(state);
            break;
        }
        default:
        {
            lua_pushstring(state, "Invalid number of parameters (expected 1).");
            lua_error(state);
            break;
        }
    }
    return 0;
}

static int lua_TransformListener_transformChanged(lua_State* state)
{
    // Get the number of parameters.
    int paramCount = lua_gettop(state);

    // Attempt to match the parameters to a valid binding.
    switch (paramCount)
    {
        case 3:
        {
            if ((lua_type(state, 1) == LUA_TUSERDATA) &&
                (lua_type(state, 2) == LUA_TUSERDATA || lua_type(state, 2) == LUA_TTABLE || lua_type(state, 2) == LUA_TNIL) &&
                lua_type(state, 3) == LUA_TNUMBER)
            {
                // Get parameter 1 off the stack.
                bool param1Valid;
                gameplay::ScriptUtil::LuaArray<Transform> param1 = gameplay::ScriptUtil::getObjectPointer<Transform>(2, "Transform", false, &param1Valid);
                if (!param1Valid)
                {
                    lua_pushstring(state, "Failed to convert parameter 1 to type 'Transform'.");
                    lua_error(state);
                }

                // Get parameter 2 off the stack.
                long param2 = (long)luaL_checklong(state, 3);

                Transform::Listener* instance = getInstance(state);
                instance->transformChanged(param1, param2);
                
                return 0;
            }

            lua_pushstring(state, "lua_TransformListener_transformChanged - Failed to match the given parameters to a valid function signature.");
            lua_error(state);
            break;
        }
        default:
        {
            lua_pushstring(state, "Invalid number of parameters (expected 3).");
            lua_error(state);
            break;
        }
    }
    return 0;
}

// Provides support for conversion to all known relative types of Transform::Listener
static void* __convertTo(void* ptr, const char* typeName)
{
    Transform::Listener* ptrObject = reinterpret_cast<Transform::Listener*>(ptr);

    if (strcmp(typeName, "AudioSource") == 0)
    {
        return reinterpret_cast<void*>(static_cast<AudioSource*>(ptrObject));
    }
    else if (strcmp(typeName, "Camera") == 0)
    {
        return reinterpret_cast<void*>(static_cast<Camera*>(ptrObject));
    }
    else if (strcmp(typeName, "MeshSkin") == 0)
    {
        return reinterpret_cast<void*>(static_cast<MeshSkin*>(ptrObject));
    }
    else if (strcmp(typeName, "PhysicsGhostObject") == 0)
    {
        return reinterpret_cast<void*>(static_cast<PhysicsGhostObject*>(ptrObject));
    }
    else if (strcmp(typeName, "PhysicsRigidBody") == 0)
    {
        return reinterpret_cast<void*>(static_cast<PhysicsRigidBody*>(ptrObject));
    }
    else if (strcmp(typeName, "Terrain") == 0)
    {
        return reinterpret_cast<void*>(static_cast<Terrain*>(ptrObject));
    }

    // No conversion available for 'typeName'
    return NULL;
}

static int lua_TransformListener_to(lua_State* state)
{
    // There should be only a single parameter (this instance)
    if (lua_gettop(state) != 2 || lua_type(state, 1) != LUA_TUSERDATA || lua_type(state, 2) != LUA_TSTRING)
    {
        lua_pushstring(state, "lua_TransformListener_to - Invalid number of parameters (expected 2).");
        lua_error(state);
        return 0;
    }

    Transform::Listener* instance = getInstance(state);
    const char* typeName = gameplay::ScriptUtil::getString(2, false);
    void* result = __convertTo((void*)instance, typeName);

    if (result)
    {
        gameplay::ScriptUtil::LuaObject* object = (gameplay::ScriptUtil::LuaObject*)lua_newuserdata(state, sizeof(gameplay::ScriptUtil::LuaObject));
        object->instance = (void*)result;
        object->owns = false;
        luaL_getmetatable(state, typeName);
        lua_setmetatable(state, -2);
    }
    else
    {
        lua_pushnil(state);
    }

    return 1;
}

void luaRegister_TransformListener()
{
    const luaL_Reg lua_members[] = 
    {
        {"transformChanged", lua_TransformListener_transformChanged},
        {"to", lua_TransformListener_to},
        {NULL, NULL}
    };
    const luaL_Reg* lua_statics = NULL;
    std::vector<std::string> scopePath;
    scopePath.push_back("Transform");

    gameplay::ScriptUtil::registerClass("TransformListener", lua_members, NULL, lua_TransformListener__gc, lua_statics, scopePath);

    luaGlobal_Register_Conversion_Function("TransformListener", __convertTo);
}

}
